<?php

/*
 * This file is part of the puli/repository-manager package.
 *
 * (c) Bernhard Schussek <bschussek@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Puli\RepositoryManager\Repository;

use Puli\Repository\Filesystem\PhpCacheRepository;
use Puli\Repository\Resource\NoDirectoryException;
use Puli\Repository\ResourceRepository;
use Puli\RepositoryManager\Config\Config;
use Puli\RepositoryManager\Environment\ProjectEnvironment;
use Puli\RepositoryManager\Package\Collection\PackageCollection;
use Symfony\Component\Filesystem\Filesystem;
use Webmozart\PathUtil\Path;

/**
 * Manages the resource repository of a Puli project.
 *
 * @since  1.0
 * @author Bernhard Schussek <bschussek@gmail.com>
 */
class RepositoryManager
{
    /**
     * @var ProjectEnvironment
     */
    private $environment;

    /**
     * @var Config
     */
    private $config;

    /**
     * @var string
     */
    private $rootDir;

    /**
     * @var PackageCollection
     */
    private $packages;

    /**
     * Creates a repository manager.
     *
     * @param ProjectEnvironment $environment
     * @param PackageCollection  $packages
     */
    public function __construct(ProjectEnvironment $environment, PackageCollection $packages)
    {
        $this->environment = $environment;
        $this->config = $environment->getConfig();
        $this->rootDir = $environment->getRootDirectory();
        $this->packages = $packages;
    }

    /**
     * Returns the manager's environment.
     *
     * @return ProjectEnvironment The project environment.
     */
    public function getEnvironment()
    {
        return $this->environment;
    }

    /**
     * Dumps a resource repository.
     *
     * Pass the path where the generated resource repository is placed in the
     * first argument. You can later `require` this path to retrieve the
     * repository:
     *
     * ```php
     * $packageManager->dumpRepository('/path/to/repository.php');
     *
     * $repo = require '/path/to/repository.php';
     * ```
     *
     * In the second argument, you can pass the path where the additional files
     * of the generated resource repository are placed.
     *
     * If you don't pass any paths, the default values from the root package
     * configuration are taken.
     *
     * @param string|null $dumpFile The path to the generated resource
     *                              repository or `null` to use the configured
     *                              default path.
     * @param string|null $dumpDir  The path to the directory storing additional
     *                              generated files or `null` to use the
     *                              configured default path.
     *
     * @throws NoDirectoryException If the dump directory exists and is not a
     *                              directory.
     * @throws ResourceConflictException If two packages contain conflicting
     *                                   resource definitions.
     * @throws ResourceDefinitionException If a resource definition is invalid.
     */
    public function dumpRepository($dumpFile = null, $dumpDir = null)
    {
        $repo = new ResourceRepository();
        $builder = new RepositoryBuilder();
        $dumpFile = $dumpFile ?: $this->config->get(Config::WRITE_REPO);
        $dumpFile = Path::makeAbsolute($dumpFile, $this->rootDir);
        $dumpFileDir = Path::getDirectory($dumpFile);
        $dumpDir = $dumpDir ?: $this->config->get(Config::DUMP_DIR);
        $dumpDir = Path::makeAbsolute($dumpDir, $this->rootDir);
        $relPathToDumpDir = Path::makeRelative($dumpDir, Path::getDirectory($dumpFile));

        $builder->loadPackages($this->packages);
        $builder->buildRepository($repo);

        if (is_dir($dumpDir)) {
            $filesystem = new Filesystem();
            $filesystem->remove($dumpDir);
        }

        PhpCacheRepository::dumpRepository($repo, $dumpDir);

        if (!file_exists($dumpFileDir)) {
            $filesystem = new Filesystem();
            $filesystem->mkdir($dumpFileDir);
        }

        file_put_contents($dumpFile, <<<EOF
<?php

// generated by the Puli repository manager

use Puli\Repository\Filesystem\PhpCacheRepository;

return new PhpCacheRepository(__DIR__.'/$relPathToDumpDir');

EOF
        );
    }

}
